<?php
class Functions
{	public static function utf8($char)	{		return mb_convert_encoding($char, "UTF-8", "ISO-8859-9");	}	public static function latin1($char)	{		return mb_convert_encoding($char, "ISO-8859-9", "UTF-8");	}	public static function gameIn($arg)	{		if ($arg == 'taslar') {			$data = array(				'0' => 'Taş Yok',				'1' => 'Taş Slotu Aktif',				'28430' => 'Kavrama Taşı +4',				'28431' => 'Öldürücü Darbe Taşı +4',				'28432' => 'Soğutma Taşı +4',				'28433' => 'Şavaşçıdan Koruyan Taş +4',				'28434' => 'Ninjadan Koruyan Taş +4',				'28435' => 'Suradan Koruyan Taş +4',				'28436' => 'Şamandan Koruyan Taş +4',				'28437' => 'Canavardan Koruyan Taş +4',				'28438' => 'Korunma Taşı +4',				'28439' => 'Kurnazlık Taşı +4',				'28440' => 'Sihir Taşı +4',				'28441' => 'Yaşam Taşı +4',				'28442' => 'Savunma Taşı +4',				'28443' => 'Hız Taşı +4'			);		} elseif ($arg == 'efsunlar') {			$data = array(				'0' => 'Efsun Yok',				'1' => 'Max HP +',				'2' => 'Max SP +',				'3' => 'Yasam Enerjisi +',				'4' => 'Zeka +',				'5' => 'Guc +',				'6' => 'ceviklik +',				'7' => 'Saldiri Hizi +',				'8' => 'Hareket Hizi +',				'9' => 'Buyu Hizi',				'10' => 'HP uretimi %',				'11' => 'SP uretimi %',				'12' => 'Zehirleme Degisimi %',				'13' => 'Sersemletme Degisimi %',				'14' => 'Yavaslik Degisimi %',				'15' => 'Kritik Vurus sansi %',				'16' => 'Delici Vurus sansi %',				'17' => 'Yari insanlara Karsi Guclu %',				'18' => 'Hayvanlara Karsi Guclu %',				'19' => 'Orklara Karsi Guclu %',				'20' => 'Mistiklere Karsi Guclu %',				'21' => 'Ölumsuzlere Karsi Guclu %',				'22' => 'seytanlara Karsi Guclu %',				'23' => 'Hasar HP Tarafindan Emilicek %',				'24' => 'Hasar SP Tarafindan Emilicek %',				'25' => 'Dusmanin Spsini calma Sansi %',				'26' => 'Vurus Yapildiginda Spyi geri calma %',				'27' => 'Beden Karsisindaki Ataklarin Bloklanmasi %',				'28' => 'Oklardan Korunma sansi %',				'29' => 'Kilic Savunmasi %',				'30' => 'cift-El Savunmasi %',				'31' => 'Bicak Savunmasi %',				'32' => 'can Savunmasi %',				'33' => 'Yelpaze Savunmasi %',				'34' => 'Oka Karsi Dayaniklilik %',				'35' => 'Atese Karsi Dayaniklilik %',				'36' => 'Simgeye Karsi Dayaniklilik %',				'37' => 'Buyuye Karsi Dayaniklilik %',				'38' => 'Ruzgar Dayanikliligi %',				'39' => 'Vucut Darbesini Yansitma sansi %',				'40' => 'Lanet Yansitilmasi %',				'41' => 'Zehre Karsi Koyma %',				'42' => 'Sp Yuklenmesi Degisti',				'43' => 'Yang Dusme sansi %',				'44' => 'Yang Dusme sansi %',				'45' => 'Esya Dusme sansi %',				'46' => 'Trank effekt zuwachs %',				'47' => 'HP Yuklenmesi Degisti %',				'48' => 'Sersemletme Karsisinda Bagisiklik %',				'49' => 'Yavaslatma Karsisinda Bagisiklik %',				'50' => 'imun gegen Sturzen',				'52' => 'Bogenreichweite +',				'53' => 'Saldiri Degeri +',				'54' => 'Savunma +',				'55' => 'Buyulu Saldiri Degeri +',				'56' => 'Buyulu Savunma +',				'58' => 'Max Dayaniklilik +',				'59' => 'Savascilara Karsi Guclu %',				'60' => 'Ninjalara Karsi Guclu %',				'61' => 'Suralara Karsi Guclu %',				'62' => 'samanlara Karsi Guclu %',				'63' => 'Yaratiklara Karsi Guclu %',				'64' => 'Saldiri Degeri +',				'65' => 'Savunma +',				'66' => 'EXP +?%',				'67' => 'Dropchance [Gegenstände]',				'68' => 'Dropchance [Gold]',				'71' => 'Beceri Hasari %',				'72' => 'Ortalama Zarar %',				'73' => 'Widerstand gegen Fertigkeitsschaden',				'74' => 'durchschn. Schadenswiderstand',				'76' => 'iCafe exp-bonus',				'77' => 'iCafe Chance auf erbeuten von gegenständen',				'78' => 'Savasci Saldirilarina Karsi Savunma %',				'79' => 'Ninja Saldirilarina Karsi Savunma %',				'80' => 'Sura Saldirilarina Karsi Savunma %',				'81' => 'Saman Saldirilarina Karsi Savunma %'			);		}		return $data;	}	public static function replace_tr($text)	{		$text = trim($text);		$search = array('Ç', 'ç', 'Ğ', 'ğ', 'ı', 'İ', 'Ö', 'ö', 'Ş', 'ş', 'Ü', 'ü', '?');		$replace = array('c', 'c', 'g', 'g', 'i', 'i', 'o', 'o', 's', 's', 'u', 'u', 'i');		$new_text = str_replace($search, $replace, $text);		return $new_text;	}	public static function alert($type, $text)	{		if ($type == 'success') {			return '<div class="callout callout-success">' . $text . '</div>';		} elseif ($type == 'error') {			return '<div class="callout callout-danger">' . $text . '</div>';		} elseif ($type == 'info') {			return '<div class="callout callout-info">' . $text . '</div>';		} elseif ($type == 'warning') {			return '<div class="callout callout-warning">' . $text . '</div>';		}	}	public static function online()	{		$getOnline = \StaticGame\StaticGame::sql("SELECT COUNT(*) as count FROM player.player WHERE DATE_SUB(NOW(), INTERVAL 60 MINUTE) < last_play;");		$count = $getOnline[0]['count'];		if ($count == '0') {			$newCount = $count;		} else {			$getFake = \StaticDatabase\StaticDatabase::settings('online');			$newCount = $count + $getFake;		}		return $newCount;	}	public static function zaman($zaman)	{		$onceBol = explode(" ", $zaman);		$gay = explode("-", $onceBol[0]);		$sds = explode(":", $onceBol[1]);		$zaman = mktime($sds[0], $sds[1], $sds[2], $gay[1], $gay[2], $gay[0]);		$zaman_farki = time() - $zaman;		$saniye = $zaman_farki;		$dakika = round($zaman_farki / 60);		$saat = round($zaman_farki / 3600);		$gun = round($zaman_farki / 86400);		$hafta = round($zaman_farki / 604800);		$ay = round($zaman_farki / 2419200);		$yil = round($zaman_farki / 29030400);		if ($saniye < 60) {			if ($saniye == 0) {				return "Az Önce";			} else {				return 'Yaklaşık ' . $saniye . ' saniye önce';			}		} else if ($dakika < 60) {			return 'Yaklaşık ' . $dakika . ' dakika önce';		} else if ($saat < 24) {			return 'Yaklaşık ' . $saat . ' saat önce';		} else if ($gun < 7) {			return 'Yaklaşık ' . $gun . ' gün önce';		} else if ($hafta < 4) {			return 'Yaklaşık ' . $hafta . ' hafta önce';		} else if ($ay < 12) {			return 'Yaklaşık ' . $ay . ' ay önce';		} else {			return 'Yaklaşık ' . $yil . ' yıl önce';		}	}	public static function find_url($string)	{		$pattern_preg1 = '#(^|\s)(www|WWW)\.([^\s<>\.]+)\.([^\s\n<>]+)#sm';		$replace_preg1 = '\\1<a href="http://\\2.\\3.\\4" target="_blank" class="link">\\2.\\3.\\4</a>';		$pattern_preg2 = '#(^|[^\"=\]]{1})(http|HTTP|ftp)(s|S)?://([^\s<>\.]+)\.([^\s<>]+)#sm';		$replace_preg2 = '\\1<a href="\\2\\3://\\4.\\5" target="_blank" class="link">\\2\\3://\\4.\\5</a>';		$string = preg_replace($pattern_preg1, $replace_preg1, $string);		$string = preg_replace($pattern_preg2, $replace_preg2, $string);		return $string;	}	public static function map($map)	{		if ($map == "1") {			return "Yongan";		} else if ($map == "3") {			return "Jayang";		} else if ($map == "4") {			return "Jungrang";		} else if ($map == "5") {			return "Shinsoo - Hasun Dong";		} else if ($map == "21") {			return "Joan";		} else if ($map == "23") {			return "Bokjung";		} else if ($map == "24") {			return "Waryong";		} else if ($map == "25") {			return "Chunjo - Hasun Dong";		} else if ($map == "41") {			return "Pyungmo";		} else if ($map == "43") {			return "Bakra";		} else if ($map == "44") {			return "İmha";		} else if ($map == "45") {			return "Jinno - Hasun Dong";		} else if ($map == "61") {			return "Sohan Dağı";		} else if ($map == "62") {			return "Doyum Paper";		} else if ($map == "63") {			return "Yongbi Çölü";		} else if ($map == "64") {			return "Seuyong Vadisi";		} else if ($map == "65") {			return "Hwang Tapınağı";		} else if ($map == "66") {			return "Gumsan Kulesi";		} else if ($map == "67") {			return "Lungsam - Hayalet Orman";		} else if ($map == "68") {			return "Lungsam - Kızıl Orman";		} else if ($map == "69") {			return "Yılan Vadisi";		} else if ($map == "70") {			return "Devler Diyarı";		} else if ($map == "71") {			return "Kuahklo Dong";		} else if ($map == "72") {			return "Sürgün Mağarası";		} else if ($map == "73") {			return "Sürgün Mağarası";		} else if ($map == "74") {			return "Sohan Dağı";		} else if ($map == "75") {			return "Hwang Tapınağı";		} else if ($map == "77") {			return "Doyum Paper";		} else if ($map == "78") {			return "Seuyong Vadisi";		} else if ($map == "79") {			return "Sürgün Mağarası";		} else if ($map == "81") {			return "Nihah Salonu";		} else if ($map == "100") {			return "Alan";		} else if ($map == "103") {			return "T 01";		} else if ($map == "104") {			return "Örümcek Zindanı";		} else if ($map == "105") {			return "T 02";		} else if ($map == "107") {			return "Örümcek Zindanı";		} else if ($map == "108") {			return "Örümcek Zindanı";		} else if ($map == "109") {			return "Örümcek Zindanı";		} else if ($map == "110") {			return "T 03";		} else if ($map == "111") {			return "T 04";		} else if ($map == "112") {			return "Düello Haritası";		} else if ($map == "113") {			return "Ox Haritası";		} else if ($map == "114") {			return "Sungzi";		} else if ($map == "118") {			return "Sungzi";		} else if ($map == "119") {			return "Sungzi";		} else if ($map == "120") {			return "Sungzi";		} else if ($map == "121") {			return "Sungzi";		} else if ($map == "122") {			return "Sungzi";		} else if ($map == "123") {			return "Sungzi";		} else if ($map == "124") {			return "Sungzi";		} else if ($map == "125") {			return "Sungzi";		} else if ($map == "126") {			return "Sungzi";		} else if ($map == "127") {			return "Sungzi";		} else if ($map == "128") {			return "Sungzi";		} else if ($map == "181") {			return "3 Yol";		} else if ($map == "182") {			return "3 Yol";		} else if ($map == "183") {			return "3 Yol";		} else if ($map == "184") {			return "Sürgün Mağarası";		} else if ($map == "185") {			return "Sürgün Mağarası";		} else if ($map == "186") {			return "Sürgün Mağarası";		} else if ($map == "187") {			return "Sürgün Mağarası";		} else if ($map == "188") {			return "Sürgün Mağarası";		} else if ($map == "189") {			return "Sürgün Mağarası";		} else if ($map == "206") {			return "Devils Catacomb";		} else if ($map == "207") {			return "Nefrit Körfezi";		} else if ($map == "208") {			return "Ejderha Ateşi Burnu";		} else if ($map == "209") {			return "Guatama Uçurumu";		} else if ($map == "210") {			return "Yıldırım Dağları";		} else if ($map == "211") {			return "Örümcek Zindanı";		} else {			return "Belli Değil";		}	}	public static function jobName($value)	{		if ($value == 0 || $value == 4) {			return 'Savaşçı';		} elseif ($value == 1 || $value == 5) {			return 'Ninja';		} elseif ($value == 2 || $value == 6) {			return 'Sura';		} elseif ($value == 3 || $value == 7) {			return 'Şaman';		} elseif ($value == 8) {			return 'Lycan';		}	}	public static function turkce_karakter($char)	{		return mb_convert_encoding($char, "UTF-8", "ISO-8859-9");	}	public static function big5ToUtf($char)	{		return mb_convert_encoding($char, "UTF-8", "BIG5");	}	public static function logConvert($type)	{		if ($type == 0)			$result = 'Çıkış';		elseif ($type == 1)			$result = 'Giriş';		return $result;	}	public static function flagName($value)	{		if ($value == 1)			$data = ['red', 'Shinsoo'];		elseif ($value == 2)			$data = ['yellow', 'Chunjo'];		else			$data = ['blue', 'Jinno'];		return $data;	}	public static function bracket()	{		return '<div class="col-md-12">        <h2 class="header-2" style="text-align: center;text-shadow: 0 0 3px #c17373;padding-bottom: 2px;background: url(' . URI::public_path('media/images/calc-divider.jpg') . ') 50% 100% no-repeat;"></h2>    </div>';	}	public static function sendServer($text, $type = "NOTICE", $port = "1")	{		if (settings('socket_status')) {			if (!function_exists("socket_create")) {				$return['function'] = false;				$return['connect'] = false;				$return['data'] = false;			} else {				$return['function'] = true;				$serverIP = inDecode(settings('ip'), settings('dbkey'));				$serverResponse = settings('socket_response');				$port = settings('socket_ch' . $port . 'port');				$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);				if ($socket < 0)					$return = ['data' => "Geçersiz Socket Tanımı", 'connect' => false, "function" => true];				else {					$socketConnect = @socket_connect($socket, $serverIP, $port);					if ($socketConnect == false)						$return = ['connect' => false, "data" => "Bağlantı Başarısız", "function" => true];					else {						$return['connect'] = true;						if ($type == "NOTICE")							$command = "NOTICE $text";						elseif ($text == false)							$command = "$type";						else							$command = "$type $text";						$command = iconv("UTF-8", "WINDOWS-1254//TRANSLIT", $command);						$query2 = "\x40$serverResponse\x0A";						$query_size2 = strlen($query2);						socket_write($socket, $query2, $query_size2);						socket_recv($socket, $result2, 256, 0);						$query = "\x40" . $command . "\x0A";						$query_size = strlen($query);						$query_result = socket_write($socket, $query, $query_size);						if ($query_result < 0)							$return['data'] = socket_strerror($query_result);						else {							socket_recv($socket, $result2, 256, 0);							if ($result2 == "OK")								$return['data'] = "OK";							else {								if ($text == false && $type == "USER_COUNT")									$return['data'] = explode(" ", $result2)[0];								else									$return['data'] = $result2;							}						}					}				}				socket_close($socket);			}			return $return;		} else			return false;	}	public static function checkPermission($array = array(), $value)	{		if (in_array($value, $array)) {			return true;		} else {			URI::redirect('errors/permission');		}	}	public static function checkPermissionMenu($array = array(), $value)	{		if (in_array($value, $array)) {			return true;		} else {			return false;		}	}	public static function getUrl()	{		$url = isset($_GET['url']) ? filter_var($_GET['url'], FILTER_SANITIZE_URL) : null;		$url = rtrim($url, '/');		$url = filter_var($url, FILTER_SANITIZE_URL);		$_url = explode('/', $url);		return $_url;	}	public static function setOn($id)	{		date_default_timezone_set('Asia/Bahrain');		$now = date('Y-m-d H:i:s');		$setOn = \StaticDatabase\StaticDatabase::init()->prepare("UPDATE user SET last_login = :last_login WHERE id = :id");		$setOn->execute(array(':last_login' => $now, ':id' => $id));	}	public static function setAdminLog($content)	{	    global $db;        $id = session_get('admin_id');        $name = session_get('admin_name');        date_default_timezone_set('Asia/Bahrain');        $setLog = $db->prepare("INSERT INTO admin_log SET user_id=:user_id,user_name=:user_name,content=:content ");        $setLog->execute([            'user_id'=>$id,            'user_name'=>$name,            'content'=>$content        ]);	}	public static function allPermission()	{		$data = array(			'Anasayfa' => array(				'İstatistikler' => '1a',				'Bayrak Diagramı' => '1b',				'Karakter Diagramı' => '1c',				'Satış İstatistikleri' => '1d',				'Channel Bot Log' => '1e',				'Command Log' => '1f'			),			'Market Yönetimi' => [				'Eşya Ekle' => '3',				'Eşya Listesi' => '4',				'Çark Eşya Ekle' => '5',				'Çark Eşya Listesi' => '6',				'Kategori Ekle' => '7',				'Kategori Listesi' => '8'			],			'Kupon Yönetimi' => [				'Kupon Oluştur' => '10',				'Kullanılmış Kuponlar' => '11',				'Kullanılmamış Kuponlar' => '12'			],			'Ticket Yönetimi' => [				'Yanıtlanmış Ticketlar' => '14',				'Yanıtlanmamış Ticketlar' => '15'			],			'Ayarlar' => [				'Online Sayısı' => '17',				'Genel Ayarlar' => '18',				'Database Ayarları' => '19',				'Market Ayarları' => '20',				'Çark Ayarları' => '21',				'Mail Ayarları' => '22',				'Link Ayarları' => '23',				'Sayaç Ayarları' => '24',				'Socket Ayarları' => '25',				'Recaptcha Ayarları' => '26',				'Paywant Ayarları' => '27',				'Teckcard Ayarları' => '28',				'İtemci Ayarları' => '29',				'EP-TL Ayarları' => '30',				'Ticket Ayarları' => '58',				'MaxEpin Ayarları' => '60',				'SanalPay Ayarları' => '61',				'İtem Sultan Ayarları' => '62',				'Oyun Alışverişi Ayarları' => '63'			],			'Hesap Yönetimi' => [				'Hesap Oluştur' => '32',				'Epi Olan Hesaplar' => '33'			],			'Event İşlemleri' => [				'Event Aç' => '35',				'Event Planla' => '36',				'Event Listesi' => '37'			],			'Yönetici Ayarları' => [				'Yönetici Oluştur' => '39',				'Yöentici Listesi' => '40'			],			'Socket İşlemleri' => [				'Dropları Aç' => '42',				'DC Atma' => '43',				'Chat Ban' => '44',				'Oyun İçi Duyuru' => '45'			],			'Log Kayıtları' => [				'Market Logları' => '47',				'Ban Logları' => '48'			],			'Haber Yönetimi' => [				'Haber Ekle' => '50',				'Haber Listesi' => '51',				'Market Haber Ekle' => '52',				'Market Haber Listesi' => '53'			],			'Pack Yönetimi' => [				'Pack Ekle' => '55',				'Pack Listesi' => '56'			]		);		return $data;	}	public static function checkAllPermission($array = array(), $value)	{		if (in_array($value, $array))			return true;		else			return false;	}	public static function deleteCache()	{		$folder = explode("/index.php", $_SERVER['SCRIPT_FILENAME'])[0] . '/data/cache';		$dir = scandir($folder);		foreach ($dir as $file) {			clearstatcache();			if (is_file($folder . '/' . $file))				unlink($folder . '/' . $file);		}	}	public static function secondsToDay($seconds)	{		$dtF = new \DateTime('@0');		$dtT = new \DateTime("@$seconds");		return $dtF->diff($dtT)->format('Süre : %a gün');	}	public static function itemToPng($vnum)	{		if ($file = fopen("data/items/item_list.txt", "r")) {			$itemVnum = null;			while (!feof($file)) {				$line = fgets($file);				$exp = explode('	', $line);				if ($exp[0] === $vnum)					return self::replaceSpace($exp[1]);			}		}	}	private static function replaceSpace($string)	{		$string = preg_replace("/\s+/", " ", $string);		$string = trim($string);		return $string;	}	public static function eventList()	{		return ["socket_moon", "socket_hexa", "socket_valentine", "socket_valentine2", "socket_halloween", "socket_mount", "socket_football", "socket_puzzle"];	}	public static function item_proto($arg)	{		if ($file = fopen("data/items/item_proto.txt", "r")) {			$itemDesc = null;			while (!feof($file)) {				$line = fgets($file);				$exp = explode('	', $line);				if ($exp[0] === $arg)					$itemDesc .= $exp[1];			}			fclose($file);			$data = $itemDesc;		} else			$data = "Eşya bulunamadı";		return $data;	}	public static function generateRandomString($length = 10) {		$characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';		$charactersLength = strlen($characters);		$randomString = '';		for ($i = 0; $i < $length; $i++) {			$randomString .= $characters[rand(0, $charactersLength - 1)];		}		return $randomString;	}	public static function item_attr($vnum)	{		if ($vnum === "16")			return "weapon";		elseif ($vnum === "1")			return "body";		elseif ($vnum === "2")			return "head";		elseif ($vnum === "256")			return "shield";		elseif ($vnum === "8")			return "wrist";		elseif ($vnum === "4")			return "foots";		elseif ($vnum === "32")			return "neck";		elseif ($vnum === "64")			return "ear";		else			return "other";	}	public static function item_attr_name($apply)	{			$data = array(				'0' => 'Efsun Yok',				'MAX_HP' => ['1','Max HP'],				'MAX_SP' => ['2','Max SP'],				'CON' => ['3','Canlılık'],				'INT' => ['4','Zeka'],				'STR' => ['5','Güç'],				'DEX' => ['6','Çeviklik'],				'ATT_SPEED' => ['7','Saldiri Hızı'],				'MOV_SPEED' => ['8','Hareket Hızı'],				'CAST_SPEED' => ['9','Büyü Hızı'],				'HP_REGEN' => ['10','HP Üretimi'],				'SP_REGEN' => ['11','SP Üretimi'],				'POISON_PCT' => ['12','Zehirleme Şansı'],				'STUN_PCT' => ['13','Sersemletme Şansı'],				'SLOW_PCT' => ['14','Yavaşlatma Şansı'],				'CRITICAL_PCT' => ['15','Kritik Vuruş Şansı'],				'PENETRATE_PCT' => ['16','Delici Vuruş Şansı'],				'ATTBONUS_HUMAN' => ['17','Yarı İnsanlara Karşı Güçlü'],				'ATTBONUS_ANIMAL' => ['18','Hayvanlara Karşı Güçlü'],				'ATTBONUS_ORC' => ['19','Orklara Karşı Güçlü'],				'ATTBONUS_MILGYO' => ['20','Mistiklere Karşı Güçlü'],				'ATTBONUS_UNDEAD' => ['21','Ölümsüzlere Karşı Güçlü'],				'ATTBONUS_DEVIL' => ['22','Şeytanlara Karşı Güçlü'],				'STEAL_HP' => ['23','Hasar HP Tarafından Emilecek'],				'STEAL_SP' => ['24','Hasar SP Tarafindan Emilicek'],				'MANA_BURN_PCT' => ['25','Düşmanin SP Çalma Şansı'],				'BLOCK' => ['27','Beden Karşısındaki Ataklari Bloklama'],				'DODGE' => ['28','Oklardan Korunma Şansı'],				'RESIST_SWORD' => ['29','Kılıç Savunması'],				'RESIST_TWOHAND' => ['30','Çift El Savunması'],				'RESIST_DAGGER' => ['31','Bıçak Savunması'],				'RESIST_BELL' => ['32','Çan Savunması'],				'RESIST_FAN' => ['33','Yelpaze Savunması'],				'RESIST_BOW' => ['34','Oka Karşı Dayanıklılık'],				'RESIST_FIRE' => ['35','Ateşe Karşı Dayanıklılık'],				'RESIST_MAGIC' => ['37','Büyüye Karşı Dayanıklılık'],				'REFLECT_MELEE' => ['39','Vucut Darbesini Yansıtma Şansı'],				'POISON_REDUCE' => ['41','Zehire Karşı Koyma Şansı'],				'EXP_DOUBLE_BONUS' => ['43','EXP Bonus Şansı'],				'GOLD_DOUBLE_BONUS' => ['44','Yang Düşme Şansı'],				'ITEM_DROP_BONUS' => ['45','Eşya Düşme Şansı'],				'IMMUNE_STUN' => ['48','Sersemliğe Karşı Bağışıklılık'],				'IMMUNE_SLOW' => ['49','Yavaşlatmaya Karşı Bağımlılık'],				'ATT_GRADE_BONUS' => ['53','Saldırı Değeri'],			);			return isset($data[$apply]) ? $data[$apply] : false;	}}